{"version":3,"sources":["../src/WebGLView.js"],"names":["getGl","ctxId","global","__RNWebGLContexts","console","warn","gl","__ctxId","Object","setPrototypeOf","WebGLRenderingContext","prototype","__proto__","createWithContext","canvas","viewport","getParameter","VIEWPORT","drawingBufferWidth","drawingBufferHeight","WebGLView","onSurfaceCreate","nativeEvent","error","Error","e","props","onContextFailure","onContextCreate","msaaSamples","viewProps","flex","backgroundColor","OS","undefined","Component","propTypes","func","number","defaultProps","NativeView","nativeOnly"],"mappings":";;;;;;;;;;AACA;;;;AACA;;;;AACA;;AAMA;;;;AACA;;;;;;;;;;;;;;AAEA;AACA,IAAMA,QAAQ,SAARA,KAAQ,CAACC,KAAD,EAA2C;AACvD,MAAI,CAACC,OAAOC,iBAAZ,EAA+B;AAC7BC,YAAQC,IAAR,CACE,gRADF;AAGA,WAAO,IAAP;AACD;AACD,MAAMC,KAAKJ,OAAOC,iBAAP,CAAyBF,KAAzB,CAAX;AACAK,KAAGC,OAAH,GAAaN,KAAb;AACA,SAAOC,OAAOC,iBAAP,CAAyBF,KAAzB,CAAP;AACA,MAAIO,OAAOC,cAAX,EAA2B;AACzBD,WAAOC,cAAP,CAAsBH,EAAtB,EAA0BJ,OAAOQ,qBAAP,CAA6BC,SAAvD;AACD,GAFD,MAEO;AACLL,OAAGM,SAAH,GAAeV,OAAOQ,qBAAP,CAA6BC,SAA5C;AACD;AACD,+BAAcL,EAAd,EAAkB,sBAAYO,iBAAZ,CAA8BP,EAA9B,EAAkCL,KAAlC,CAAlB;;AAEAK,KAAGQ,MAAH,GAAY,IAAZ;;AAEA,MAAMC,WAAWT,GAAGU,YAAH,CAAgBV,GAAGW,QAAnB,CAAjB;AACAX,KAAGY,kBAAH,GAAwBH,SAAS,CAAT,CAAxB;AACAT,KAAGa,mBAAH,GAAyBJ,SAAS,CAAT,CAAzB;;AAEA,SAAOT,EAAP;AACD,CAxBD;;IA0BqBc,S;;;;;;;;;;;;;;4LAsCnBC,e,GAAkB,iBAIZ;AAAA,UAHWpB,KAGX,SAHJqB,WAGI,CAHWrB,KAGX;;AACJ,UAAIK,WAAJ;AAAA,UAAQiB,cAAR;AACA,UAAI;AACFjB,aAAKN,MAAMC,KAAN,CAAL;AACA,YAAI,CAACK,EAAL,EAAS;AACPiB,kBAAQ,IAAIC,KAAJ,CAAU,iCAAV,CAAR;AACD;AACF,OALD,CAKE,OAAOC,CAAP,EAAU;AACVF,gBAAQE,CAAR;AACD;AACD,UAAIF,KAAJ,EAAW;AACT,YAAI,MAAKG,KAAL,CAAWC,gBAAf,EAAiC;AAC/B,gBAAKD,KAAL,CAAWC,gBAAX,CAA4BJ,KAA5B;AACD,SAFD,MAEO;AACL,gBAAMA,KAAN;AACD;AACF,OAND,MAMO,IAAIjB,MAAM,MAAKoB,KAAL,CAAWE,eAArB,EAAsC;AAC3C,cAAKF,KAAL,CAAWE,eAAX,CAA2BtB,EAA3B;AACD;AACF,K;;;;;6BA5CQ;AAAA,mBAMH,KAAKoB,KANF;AAAA,UAELE,eAFK,UAELA,eAFK;AAAA,UAGLD,gBAHK,UAGLA,gBAHK;AAAA,UAILE,WAJK,UAILA,WAJK;AAAA,UAKFC,SALE;;AAQP;AACA;;;AACA,aACE;AAAA;AAAUA,iBAAV;AACE,sCAAC,SAAD,CAAW,UAAX;AACE,iBAAO,EAAEC,MAAM,CAAR,EAAWC,iBAAiB,aAA5B,EADT;AAEE,2BAAiB,KAAKX,eAFxB;AAGE,uBAAa,sBAASY,EAAT,KAAgB,KAAhB,GAAwBJ,WAAxB,GAAsCK;AAHrD;AADF,OADF;AASD;;;;EApCoC,gBAAMC,S;;AAAxBf,S,CAMZgB,S;AACLR,mBAAiB,oBAAUS,I;AAC3BV,oBAAkB,oBAAUU,I;AAC5BR,eAAa,oBAAUS;;AATNlB,S,CAaZmB,Y,GAAe;AACpBV,eAAa;AADO,C;AAbHT,S,CA+DZoB,U,GAAa,yCAAuB,aAAvB,EAAsCpB,SAAtC,EAAiD;AACnEqB,cAAY,EAAEpB,iBAAiB,IAAnB;AADuD,CAAjD,C;kBA/DDD,S","file":"WebGLView.js","sourcesContent":["//@flow\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Platform,\n  View,\n  ViewPropTypes,\n  requireNativeComponent\n} from \"react-native\";\nimport RNExtension from \"./RNExtension\";\nimport wrapGLMethods from \"./wrapGLMethods\";\n\n// Get the GL interface from an RNWebGLContextID and do JS-side setup\nconst getGl = (ctxId: number): ?WebGLRenderingContext => {\n  if (!global.__RNWebGLContexts) {\n    console.warn(\n      \"RNWebGL: Can only run on JavaScriptCore! Do you have 'Remote Debugging' enabled in your app's Developer Menu (https://facebook.github.io/react-native/docs/debugging.html)? RNWebGL is not supported while using Remote Debugging, you will need to disable it to use RNWebGL.\"\n    );\n    return null;\n  }\n  const gl = global.__RNWebGLContexts[ctxId];\n  gl.__ctxId = ctxId;\n  delete global.__RNWebGLContexts[ctxId];\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(gl, global.WebGLRenderingContext.prototype);\n  } else {\n    gl.__proto__ = global.WebGLRenderingContext.prototype;\n  }\n  wrapGLMethods(gl, RNExtension.createWithContext(gl, ctxId));\n\n  gl.canvas = null;\n\n  const viewport = gl.getParameter(gl.VIEWPORT);\n  gl.drawingBufferWidth = viewport[2];\n  gl.drawingBufferHeight = viewport[3];\n\n  return gl;\n};\n\nexport default class WebGLView extends React.Component {\n  props: {\n    onContextCreate: (gl: WebGLRenderingContext) => void,\n    onContextFailure: (e: Error) => void,\n    msaaSamples: number\n  };\n  static propTypes = {\n    onContextCreate: PropTypes.func,\n    onContextFailure: PropTypes.func,\n    msaaSamples: PropTypes.number,\n    ...ViewPropTypes\n  };\n\n  static defaultProps = {\n    msaaSamples: 4\n  };\n\n  render() {\n    const {\n      onContextCreate, // eslint-disable-line no-unused-vars\n      onContextFailure, // eslint-disable-line no-unused-vars\n      msaaSamples,\n      ...viewProps\n    } = this.props;\n\n    // NOTE: Removing `backgroundColor: \"transparent\"` causes a performance\n    //       regression. Not sure why yet...\n    return (\n      <View {...viewProps}>\n        <WebGLView.NativeView\n          style={{ flex: 1, backgroundColor: \"transparent\" }}\n          onSurfaceCreate={this.onSurfaceCreate}\n          msaaSamples={Platform.OS === \"ios\" ? msaaSamples : undefined}\n        />\n      </View>\n    );\n  }\n\n  onSurfaceCreate = ({\n    nativeEvent: { ctxId }\n  }: {\n    nativeEvent: { ctxId: number }\n  }) => {\n    let gl, error;\n    try {\n      gl = getGl(ctxId);\n      if (!gl) {\n        error = new Error(\"RNWebGL context creation failed\");\n      }\n    } catch (e) {\n      error = e;\n    }\n    if (error) {\n      if (this.props.onContextFailure) {\n        this.props.onContextFailure(error);\n      } else {\n        throw error;\n      }\n    } else if (gl && this.props.onContextCreate) {\n      this.props.onContextCreate(gl);\n    }\n  };\n\n  static NativeView = requireNativeComponent(\"RNWebGLView\", WebGLView, {\n    nativeOnly: { onSurfaceCreate: true }\n  });\n}\n"]}